module uncommon 1;

# Use uncommon policy constructs to ensure the parser can handle them without breaking

require {
	type bar_t;
	role system_r, user_r;
}

type baz_t alias { old_baz_t older_baz_t };
type this_shouldnt_be_allowed_t alias other_name_t, attr_name;

permissive foo_t;

sid netmsg gen_context(system_u:object_r:netlabel_peer_t,mls_systemhigh)

portcon udp 7007 gen_context(system_u:object_r:afs_bos_port_t,s0)
portcon udp 7007 gen_context(system_u:object_r:afs_bos_port_t,s0:c2)
portcon udp 7007 gen_context(system_u:object_r:afs_bos_port_t,s0,s1:c0.c225)
portcon udp 7007-7008 gen_context(system_u:object_r:afs_bos_port_t,s0)
fs_use_trans devtmpfs gen_context(system_u:object_r:device_t,s0);
genfscon sysfs /devices/system/cpu/online gen_context(system_u:object_r:cpu_online_t,s0)
genfscon cgroup "/system.slice" -d gen_context(system_u:object_r:cgroup_system_slice_t,s0)
fs_use_xattr btrfs gen_context(system_u:object_r:fs_t,s0);
fs_use_task eventpollfs gen_context(system_u:object_r:fs_t,s0);

bool bool_one;

attribute_role rattr;

class file { read write open };

roleattribute system_r mount_roles;

optional_policy(`
;
')

optional_policy(`
	foo_read(bar_t)
',`
	# else
	foo_write(bar_t)
')

netifcon lo gen_context(system_u:object_r:lo_netif_t,s0 - mls_systemhigh) gen_context(system_u:object_r:unlabeled_t,s0 - mls_systemhigh)

nodecon 127.0.0.1 255.255.255.255 gen_context(system_u:object_r:system_t:s0)
nodecon ::5 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff gen_context(system_u:object_r:system_t:s0)
nodecon ::ffff:127.0.0.1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff gen_context(system_u:object_r:lo_node_t,s0)

if (!bool_one) {
	allow foo_t bar_t:file open;
}

if (bool_one && ( bool_three || ( bool_four != bool_five))) {
	allow foo_t baz_t:file write;
}

if (bool_one == bool_two) {
	allow foo_t baz_t:file relabelto;
}

# Interface with a missing comma
foo_if(foo_t, bar_t baz_t)

allow system_r user_r;

empty_interfaces_are_legal()

gen_require(
	type no_backticks_t;
	role no_backticks_r;
)

gen_tunable(`hello',world)
gen_tunable(hello,world)

define(yes, no)

define(`list_of_things', `{ thing1 thing2 }')

typebounds foo_t bar_t;

call_with_backtick_args(foo_t,bar_t,`in')
dollar_sign_in_string("foo1-$3_$2")

ifdef(`test',`
	gen_require(`
		type nesting_t;
	')
')

foo_filter_template(synchronizer,synchronizer,`')

role_transition foo_r bar_exec_t bar_r;
role_transition foo_r baz_exec_t:{file lnk_file sock_file} baz_r;

genfscon rootfs / -- gen_context(system_u:object_r:rootfs_t, s0)
genfscon rootfs / -l gen_context(system_u:object_r:rootfs_t, s0)

#exceptions
neverallow { domain -foo_t } secret_stuff_t:file read;

empty_string_first(`', foo_t)

type type_t alias { alias1 alias2 alias3 }, attribute1;
type type_t alias { alias1 alias2 alias3 }, attribute1, attribute2, attribute3;

refpolicywarn(`$0($*) has been deprecated, please use foo(); instead.')

xperm_macro(foo_t, bar_t, 0x1234)
xperm_macro(foo_t, bar_t, { 0x5000 - 0x50ff 1234 })

exempt_interface(foo_t, { -bar1_t -bar2_t })

gen_user(my_user_u,, some_role_r, s0, s0 - mls_systemhigh, mcs_allcats)

bare_word
bare_word;
ifdef(`foo',`
	bare_word
')
ifdef(`foo',`
	# comment
	bare_word
')

define(`not_foo',`-foo_t')

define(`foobar')

ifelse(`$1',,, `
    refpolicywarn(`dollar one defined')
')

example_interface(foo_t, `s0:c0')
example_interface(foo_t, `s15:c100.c102')
range_transition foo_t foo_t:file s0:c0 - s15:c100.c102;
example_interface(foo_t, `s0:c0 - s15:c100.c102')

type_transition foo_t foo_t : anon_inode bar_t "[userfaultfd]";
anoninodetrans_pattern(foo_t, bar_t, "[io_uring]")

gen_require(`
	all_userspace_class_perms
')

define(`my_var',`')

define(`my_other_var',`
# This is a comment
allow foo_t self:capability sys_ptrace;

optional_policy(`
	call_some_interface(foo_t)
')
')
